#Область Работа_с_СКД   

Функция ПолучитьСтруктуруРезультатаВыполненияОтчетаИзСКД_ИзВнешнейТаблицы(СтруктураПараметров) ЭКСПОРТ
	
	СхемаКомпоновкиОтчета = СтруктураПараметров.СхемаКомпоновкиОтчета;
	ТекстЗапроса = СтруктураПараметров.ТекстЗапроса;
	СтруктураПараметровЗапроса = ?(СтруктураПараметров.Свойство("СтруктураПараметровЗапроса",СтруктураПараметровЗапроса),СтруктураПараметровЗапроса,новый Структура);
	СтруктураЗаменяемыхЗначений = ?(СтруктураПараметров.Свойство("СтруктураЗаменяемыхЗначений",СтруктураЗаменяемыхЗначений),СтруктураЗаменяемыхЗначений,новый Структура);
	
	ДокументРезультат = ?(СтруктураПараметров.Свойство("ДокументРезультат",ДокументРезультат),ДокументРезультат,новый ТабличныйДокумент);
	Если НЕ СтруктураПараметров.Свойство("КомпоновщикНастроек") ИЛИ СтруктураПараметров.КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиОтчета));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиОтчета.НастройкиПоУмолчанию);		
	Иначе
		КомпоновщикНастроек = СтруктураПараметров.КомпоновщикНастроек;	
	КонецЕсли;
	
	ДанныеОтчета = новый Структура;
	
	РезультатЗапроса = ПолучитьРезультатПроизвольногоТекстаЗапроса(ТекстЗапроса,СтруктураПараметровЗапроса,СтруктураЗаменяемыхЗначений); 
	ТаблицаОтчета = РезультатЗапроса.Выгрузить();
	
	ВнешниеНаборыДанных = новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаОтчета",ТаблицаОтчета);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиОтчета,Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	ДокументРезультат.АвтоМасштаб = Истина;	
	ХранилищеРасшифровок = Новый ХранилищеЗначения(ДанныеРасшифровки);
	
	ДанныеОтчета.Вставить("ВыводТабличногоДокумента",ДокументРезультат);
	ДанныеОтчета.Вставить("ХранилищеРасшифровок",ХранилищеРасшифровок);
	Возврат ДанныеОтчета;	 
	
КонецФункции

#КонецОбласти

#Область Работа_с_Формами

Процедура ДобавитьПроизвольнуюТаблицуНаФорму(ИмяТаблицыНаФорме,Форма,ТаблицаЗначений,ГруппаФормыДляТаблицы = Неопределено) ЭКСПОРТ
	МассивРеквизитовДляДобавления = новый Массив;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	НужноСоздатьТаблицу = Истина;
	Для каждого Реквизит из РеквизитыФормы Цикл
		Если Реквизит.Имя = ИмяТаблицыНаФорме Тогда
			НужноСоздатьТаблицу = Ложь;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	

	Если НужноСоздатьТаблицу Тогда
		нРеквизит = новый РеквизитФормы(ИмяТаблицыНаФорме,новый ОписаниеТипов("ТаблицаЗначений"));
		МассивРеквизитовДляДобавления.Добавить(нРеквизит);
	КонецЕсли;	
	
	Для каждого Колонка из ТаблицаЗначений.Колонки цикл		
		нРеквизит = новый РеквизитФормы(Колонка.Имя,Колонка.ТипЗначения,ИмяТаблицыНаФорме,Колонка.Заголовок);
		МассивРеквизитовДляДобавления.Добавить(нРеквизит);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(МассивРеквизитовДляДобавления);	
	
	РодительЭлементаТаблица = ?(ГруппаФормыДляТаблицы <> Неопределено,ГруппаФормыДляТаблицы,Форма);
	элТаблицаНаФорме = Форма.Элементы.Добавить(ИмяТаблицыНаФорме,Тип("ТаблицаФормы"),РодительЭлементаТаблица);
	элТаблицаНаФорме.ПутьКДанным = ИмяТаблицыНаФорме; 
	элТаблицаНаФорме.ТолькоПросмотр = Истина;
	
	Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
		элКолонкаТаблицы = Форма.Элементы.Добавить(ИмяТаблицыНаФорме + Колонка.Имя,Тип("ПолеФормы"),элТаблицаНаФорме);
		элКолонкаТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		элКолонкаТаблицы.ПутьКДанным = ИмяТаблицыНаФорме + "." + Колонка.Имя;
	КонецЦикла;
	
	Форма[ИмяТаблицыНаФорме].Загрузить(ТаблицаЗначений);	
КонецПроцедуры

Функция ВернутьНаКлиентКопиюОбъекта(Знач ОбъектКлиента) ЭКСПОРТ
	Возврат ОбъектКлиента;	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ПолучитьРезультатПроизвольногоТекстаЗапроса(ТекстЗапроса,Знач СтруктураПараметровЗапроса = Неопределено, Знач СтруктураЗаменяемыхЗначений = Неопределено) ЭКСПОРТ
	
	Если ТипЗнч(СтруктураПараметровЗапроса) <> Тип("Структура") Тогда
		СтруктураПараметровЗапроса = новый Структура;			
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЗаменяемыхЗначений) <> Тип("Структура") Тогда
		СтруктураЗаменяемыхЗначений = новый Структура;			
	КонецЕсли;	
	
	Запрос = новый Запрос;	
	
	Для каждого ПараметрЗапроса из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);	
	КонецЦикла;
	
	Для каждого ТекстЗамены из СтруктураЗаменяемыхЗначений цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&" + ТекстЗамены.Ключ,ТекстЗамены.Значение);		
	КонецЦикла;	

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();	
КонецФункции

#КонецОбласти 

#Область Телеграма

Процедура ТестОтправки(AccessToken,ChatId,ТекстСообщения)
	ОтправкаВТелерам = новый HTTPСоединение("api.telegram.org",443,,,,15,новый ЗащищенноеСоединениеOpenSSL());
	ОтправкаВТелерам.Получить(новый HTTPЗапрос("bot" + AccessToken + "/sendMessage?chat_id" + ChatId + "&text=" + ТекстСообщения));
КонецПроцедуры

#КонецОбласти 

Функция СоздатьХранилищеЗначения(Знач СериализуемоеЗначение,Знач АлгоритмСжатияДанных = Неопределено) ЭКСПОРТ
	Если ТипЗнч(АлгоритмСжатияДанных) = Тип("Число") И АлгоритмСжатияДанных > 0 И АлгоритмСжатияДанных < 10 Тогда
		Возврат новый ХранилищеЗначения(СериализуемоеЗначение,новый СжатиеДанных(АлгоритмСжатияДанных));
	Иначе
		Возврат новый ХранилищеЗначения(СериализуемоеЗначение);		
	КонецЕсли;	
КонецФункции

Функция ВернутьЗначениеХранилища(ХранилищеЗначения) ЭКСПОРТ
	Возврат ХранилищеЗначения.Получить();
КонецФункции

Функция ВыполненаПроверкаНаИдентичностьТаблицЗначений(Знач ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ
	ПерваяТаблица = ФиксированныеПараметры.ПерваяТаблица;
	ВтораяТаблица = ФиксированныеПараметры.ВтораяТаблица; 
	
	Если НЕ ( ТипЗнч(ПерваяТаблица) = Тип("ТаблицаЗначений") И ТипЗнч(ВтораяТаблица) = Тип("ТаблицаЗначений") ) Тогда
		СообщениеОшибки = "Переданные аргументы не являются таблицами значений.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ИдентичныИменаКолонокТаблицЗначений(ФиксированныеПараметры,МодифицируемыеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПерваяТаблица) И НЕ ЗначениеЗаполнено(ВтораяТаблица) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ИменаКолонокТаблиц = новый Массив;
	
	Для каждого Колонка из ПерваяТаблица.Колонки Цикл
		ИменаКолонокТаблиц.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИменаКолонокТаблиц) Тогда
		СообщениеОшибки = "ТаблицыЗначений со строками но без колонок 0_о.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);		
		Возврат Ложь;
	КонецЕсли;
	
	ТемпПерваяТаблица = ПерваяТаблица.Скопировать();
	ТепмВтораяТаблица = ВтораяТаблица.Скопировать();
	
	ПоследИдн = ТемпПерваяТаблица.Количество() - 1; 
	
	Пока ПоследИдн >= 0 Цикл
		
		стр_первойТЗ = ТемпПерваяТаблица[ПоследИдн];
		
		СтруктураПоискаСтрокиВоВтройТаблице = новый Структура;
		Для каждого ИмяКолонки из ИменаКолонокТаблиц Цикл
			СтруктураПоискаСтрокиВоВтройТаблице.Вставить(ИмяКолонки,стр_первойТЗ[ИмяКолонки]);
		КонецЦикла;	
		
		масСтрокВторойТаблицы = ТепмВтораяТаблица.НайтиСтроки(СтруктураПоискаСтрокиВоВтройТаблице);
		
		Если НЕ ЗначениеЗаполнено(масСтрокВторойТаблицы) Тогда
			СообщениеОшибки = "Во второй таблице не найдено соответсвующих строк по отбору.";
			МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		стр_для_удаления_из_второй_таблицы = масСтрокВторойТаблицы[0];
		ТепмВтораяТаблица.Удалить(стр_для_удаления_из_второй_таблицы);
		ТемпПерваяТаблица.Удалить(стр_первойТЗ);
		
		ПоследИдн = ПоследИдн - 1;		
	КонецЦикла;	
	
	Если НЕ (НЕ ЗначениеЗаполнено(ТемпПерваяТаблица) И НЕ ЗначениеЗаполнено(ТепмВтораяТаблица) )Тогда
		СообщениеОшибки = "Не пройдена проверка идентичности для таблиц.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Функция ИдентичныИменаКолонокТаблицЗначений(Знач ФиксированныеПараметры,МодифицируемыеПараметры) ЭКСПОРТ 
	
	ПерваяТаблица = ФиксированныеПараметры.ПерваяТаблица;
	ВтораяТаблица = ФиксированныеПараметры.ВтораяТаблица;
	
	ИменаКолонокПервойТаблицы = новый Массив;
	ИменаКолонокВторойТаблицы = новый Массив;
	
	Для каждого Колонка из ПерваяТаблица.Колонки Цикл
		ИменаКолонокПервойТаблицы.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для каждого Колонка из ВтораяТаблица.Колонки Цикл
		ИменаКолонокВторойТаблицы.Добавить(Колонка.Имя);
	КонецЦикла;

	ИтераторУдаления = ИменаКолонокПервойТаблицы.ВГраница();
	Пока ИтераторУдаления >= 0 Цикл 
		ИмяКолонкиПервойТаблицы = ИменаКолонокПервойТаблицы[ИтераторУдаления];
		
		ИндексИмениКолонкиВторойТаблицы = ИменаКолонокВторойТаблицы.Найти(ИмяКолонкиПервойТаблицы);
		Если ИндексИмениКолонкиВторойТаблицы = Неопределено Тогда
			СообщениеОшибки = "Во второй таблице отсутствует колонка: " + ИмяКолонкиПервойТаблицы;
			МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
			Возврат Ложь;			
		КонецЕсли;	
		
		ИменаКолонокПервойТаблицы.Удалить(ИтераторУдаления);
		ИменаКолонокВторойТаблицы.Удалить(ИндексИмениКолонкиВторойТаблицы);
		ИтераторУдаления = ИтераторУдаления - 1;			
	КонецЦикла;
	
	масИменНеИдентичныхКолонок = новый Массив;
	
	Для каждого ИмяКолонки из ИменаКолонокПервойТаблицы Цикл
		масИменНеИдентичныхКолонок.Добавить("ПерваяТаблица: " + ИмяКолонки);	
	КонецЦикла;	
	
	Для каждого ИмяКолонки из ИменаКолонокВторойТаблицы Цикл
		масИменНеИдентичныхКолонок.Добавить("ВтораяТаблица: " + ИмяКолонки);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(масИменНеИдентичныхКолонок) Тогда
		СообщениеОшибки = "Обнаружены различные колонки в таблицах: " + Символы.ПС;
		
		Для каждого ИмяКолонки из масИменНеИдентичныхКолонок Цикл
			СообщениеОшибки = СообщениеОшибки + ИмяКолонки + Символы.ПС;	
		КонецЦикла;	
		
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции
	
	
	
	