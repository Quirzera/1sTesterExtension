#Область Работа_с_СКД 

Функция ПолучитьШаблонСтруктурыПараметров_Для_ВыполненияОтчетаИзСКД_ИзВнешнейТаблицы(СхемаКомпоновкиОтчета,ТекстЗапроса) ЭКСПОРТ
	СтруктураПараметров = новый Структура;             
	
	СтруктураПараметров.Вставить("СхемаКомпоновкиОтчета",СхемаКомпоновкиОтчета);
	СтруктураПараметров.Вставить("ТекстЗапроса",ТекстЗапроса);
	
	СтруктураПараметров.Вставить("СтруктураПараметровЗапроса",новый Структура);
	СтруктураПараметров.Вставить("СтруктураЗаменяемыхЗначений",новый Структура);
	
	СтруктураПараметров.Вставить("ДокументРезультат",новый ТабличныйДокумент);
	СтруктураПараметров.Вставить("КомпоновщикНастроек",Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции


#КонецОбласти

#Область Сериализация_Десериализация

Функция Сериализовать_в_XML_Строку(ОбъектСериализации) ЭКСПОРТ
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML,ДеревоВОбъектеXDTO);
	СериализованнаяСтрокаXML = МойXML.Закрыть();
	Возврат СериализованнаяСтрокаXML;
КонецФункции

Функция Десериализовать_из_XML_Строки(XML_Строка_СериализованногоОбъекта) ЭКСПОРТ
	ЧтениеXMLДанных = новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XML_Строка_СериализованногоОбъекта);
	ДесериализованноеЗначение = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();
	Возврат ДесериализованноеЗначение;
КонецФункции

Функция Сериализовать_в_JSON_Строку(ОбъектСериализации) ЭКСПОРТ
	ЗаписьJSON = Новый ЗаписьJSON;
	//Или в строку
	ЗаписьJSON.УстановитьСтроку();
	//Или в файл
	//ЗаписьJSON.ОткрытьФайл("D:\testBor.txt");
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектСериализации, НазначениеТипаXML.Явное);
	СериализованнаяСтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СериализованнаяСтрокаJSON;
КонецФункции

Функция Десериализовать_из_JSON_Строки(JSON_Строка_СериализованногоОбъекта) ЭКСПОРТ
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку(JSON_Строка_СериализованногоОбъекта);
	//Или из файла	
	//ЧтениеJSON.ОткрытьФайл("D:\testBor.txt");		
	ДесериализованноеЗначение = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат ДесериализованноеЗначение;
КонецФункции

#КонецОбласти

Функция УстановитьБулевуПометкуПоДеревуФормы(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ  
	ЗначениеМетки = ФиксированныеПараметры.ЗначениеМетки;
	ИмяПоля = ФиксированныеПараметры.ИмяПоля; 
	
	ТекущаяВеткаДерева = ?(МодифицируемыеПараметры.Свойство("ТекущаяВеткаДерева",ТекущаяВеткаДерева),ТекущаяВеткаДерева,Неопределено);
	ДеревоФормы = ?(МодифицируемыеПараметры.Свойство("ДеревоФормы",ДеревоФормы),ДеревоФормы,Неопределено);
	
	Если НЕ (ЗначениеЗаполнено(ИмяПоля) И ЗначениеЗаполнено(ЗначениеМетки)) Тогда
		СообщениеОшибки = "Не корректный вызов. Не указано имя поля/Значение метки.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	Если ТекущаяВеткаДерева = Неопределено И ДеревоФормы = Неопределено Тогда
		СообщениеОшибки = "Не корректный вызов.Не передано дерево формы/начальная ветка дерева.";
		МодифицируемыеПараметры.Вставить("СообщениеОшибки",СообщениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущаяВеткаДерева = Неопределено Тогда
		ТекущаяВеткаДерева = ДеревоФормы;
	КонецЕсли;	
	
	ЭлементыТекущейВетки = ТекущаяВеткаДерева.ПолучитьЭлементы();
	Для каждого ЭлементТекущейВетки из ЭлементыТекущейВетки Цикл
		ЭлементТекущейВетки[ИмяПоля] = ЗначениеМетки;
		
		НеИзменяемыеПараметры = новый Структура;
		НеИзменяемыеПараметры.Вставить("ЗначениеМетки",ЗначениеМетки);
		НеИзменяемыеПараметры.Вставить("ИмяПоля",ИмяПоля);
		НеИзменяемыеПараметры = новый ФиксированнаяСтруктура(НеИзменяемыеПараметры);
		
		ИзменяемыеПараметры = новый Структура;
		ИзменяемыеПараметры.Вставить("ТекущаяВеткаДерева",ЭлементТекущейВетки);
		
		УстановитьБулевуПометкуПоДеревуФормы(НеИзменяемыеПараметры,ИзменяемыеПараметры);		
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции

Функция ПройденаПроверкаФормата_XML_Файла(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ
	ИмяФайлаXML = ФиксированныеПараметры.ИмяФайлаXML; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
	
	//// проверка формата файла обмена
	//Если Не ЧтениеXML.Прочитать()
	//	Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
	//	Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
	//	Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
	//	
	//	СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Если Не ЧтениеXML.Прочитать()
	//	Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
	//	Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
	//	
	//	СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
	//	Возврат;
	//	
	//КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ЭтоРасширениеТекстовогоФайла(Расширение) ЭКСПОРТ
	Если СтрЗаканчиваетсяНа(Расширение,"xml") Тогда
		Возврат Истина;
	КонецЕсли;	
КонецФункции 

Функция ДанныеЗаписаныВФайл(ФиксированныеПараметры, МодифицируемыеПараметры) ЭКСПОРТ
	ЗаписываемыеДанные = ФиксированныеПараметры.ЗаписываемыеДанные;
	РасширениеФайлаДанных = ФиксированныеПараметры.РасширениеФайлаДанных;	
	ПолноеИмяСохраняемогоФайла = ФиксированныеПараметры.ПолноеИмяСохраняемогоФайла;
	
	ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайлаДанных);	
	
	Если ЭтоРасширениеТекстовогоФайла(РасширениеФайлаДанных) Тогда
		Кодировка = КодировкаТекста.UTF8;
		ТекстовыйФайлЗапись = Новый ЗаписьТекста(ВремФайл,Кодировка);
		ТекстовыйФайлЗапись.Записать(ЗаписываемыеДанные);
		ТекстовыйФайлЗапись.Закрыть();
		ДвоичныеДанныеФайла = новый ДвоичныеДанные(ВремФайл);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяСохраняемогоФайла);
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Формы \\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область СобытияФормы

#КонецОбласти


///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Команд\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область КомандыФормы

#КонецОбласти

///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Обработчики Событий Элементов\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область ЭлементыФормы

#КонецОбласти

///////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////Служебные методы\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////\\\\\\\\\\\\\\\///////////////\\\\\\\\\\\\\\///////////////

#Область Служебные

#КонецОбласти

/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////Для удаления\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#Область ДляУдаления

#КонецОбласти

////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////////////
////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Для удаления/////////////////////////////
////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////////////////////////